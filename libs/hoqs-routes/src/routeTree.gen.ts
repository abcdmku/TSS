/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LicenseImport } from './routes/license'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as DriversIndexImport } from './routes/drivers/index'
import { Route as CabinetsIndexImport } from './routes/cabinets/index'
import { Route as DriversIdImport } from './routes/drivers/$id'
import { Route as CabinetsIdImport } from './routes/cabinets/$id'
import { Route as DriversIdEditImport } from './routes/drivers/$id.edit'
import { Route as CabinetsIdEditImport } from './routes/cabinets/$id.edit'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LicenseRoute = LicenseImport.update({
  id: '/license',
  path: '/license',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DriversIndexRoute = DriversIndexImport.update({
  id: '/drivers/',
  path: '/drivers/',
  getParentRoute: () => rootRoute,
} as any)

const CabinetsIndexRoute = CabinetsIndexImport.update({
  id: '/cabinets/',
  path: '/cabinets/',
  getParentRoute: () => rootRoute,
} as any)

const DriversIdRoute = DriversIdImport.update({
  id: '/drivers/$id',
  path: '/drivers/$id',
  getParentRoute: () => rootRoute,
} as any)

const CabinetsIdRoute = CabinetsIdImport.update({
  id: '/cabinets/$id',
  path: '/cabinets/$id',
  getParentRoute: () => rootRoute,
} as any)

const DriversIdEditRoute = DriversIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => DriversIdRoute,
} as any)

const CabinetsIdEditRoute = CabinetsIdEditImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => CabinetsIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/license': {
      id: '/license'
      path: '/license'
      fullPath: '/license'
      preLoaderRoute: typeof LicenseImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/cabinets/$id': {
      id: '/cabinets/$id'
      path: '/cabinets/$id'
      fullPath: '/cabinets/$id'
      preLoaderRoute: typeof CabinetsIdImport
      parentRoute: typeof rootRoute
    }
    '/drivers/$id': {
      id: '/drivers/$id'
      path: '/drivers/$id'
      fullPath: '/drivers/$id'
      preLoaderRoute: typeof DriversIdImport
      parentRoute: typeof rootRoute
    }
    '/cabinets/': {
      id: '/cabinets/'
      path: '/cabinets'
      fullPath: '/cabinets'
      preLoaderRoute: typeof CabinetsIndexImport
      parentRoute: typeof rootRoute
    }
    '/drivers/': {
      id: '/drivers/'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof DriversIndexImport
      parentRoute: typeof rootRoute
    }
    '/cabinets/$id/edit': {
      id: '/cabinets/$id/edit'
      path: '/edit'
      fullPath: '/cabinets/$id/edit'
      preLoaderRoute: typeof CabinetsIdEditImport
      parentRoute: typeof CabinetsIdImport
    }
    '/drivers/$id/edit': {
      id: '/drivers/$id/edit'
      path: '/edit'
      fullPath: '/drivers/$id/edit'
      preLoaderRoute: typeof DriversIdEditImport
      parentRoute: typeof DriversIdImport
    }
  }
}

// Create and export the route tree

interface CabinetsIdRouteChildren {
  CabinetsIdEditRoute: typeof CabinetsIdEditRoute
}

const CabinetsIdRouteChildren: CabinetsIdRouteChildren = {
  CabinetsIdEditRoute: CabinetsIdEditRoute,
}

const CabinetsIdRouteWithChildren = CabinetsIdRoute._addFileChildren(
  CabinetsIdRouteChildren,
)

interface DriversIdRouteChildren {
  DriversIdEditRoute: typeof DriversIdEditRoute
}

const DriversIdRouteChildren: DriversIdRouteChildren = {
  DriversIdEditRoute: DriversIdEditRoute,
}

const DriversIdRouteWithChildren = DriversIdRoute._addFileChildren(
  DriversIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/license': typeof LicenseRoute
  '/login': typeof LoginRoute
  '/cabinets/$id': typeof CabinetsIdRouteWithChildren
  '/drivers/$id': typeof DriversIdRouteWithChildren
  '/cabinets': typeof CabinetsIndexRoute
  '/drivers': typeof DriversIndexRoute
  '/cabinets/$id/edit': typeof CabinetsIdEditRoute
  '/drivers/$id/edit': typeof DriversIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/license': typeof LicenseRoute
  '/login': typeof LoginRoute
  '/cabinets/$id': typeof CabinetsIdRouteWithChildren
  '/drivers/$id': typeof DriversIdRouteWithChildren
  '/cabinets': typeof CabinetsIndexRoute
  '/drivers': typeof DriversIndexRoute
  '/cabinets/$id/edit': typeof CabinetsIdEditRoute
  '/drivers/$id/edit': typeof DriversIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/license': typeof LicenseRoute
  '/login': typeof LoginRoute
  '/cabinets/$id': typeof CabinetsIdRouteWithChildren
  '/drivers/$id': typeof DriversIdRouteWithChildren
  '/cabinets/': typeof CabinetsIndexRoute
  '/drivers/': typeof DriversIndexRoute
  '/cabinets/$id/edit': typeof CabinetsIdEditRoute
  '/drivers/$id/edit': typeof DriversIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/license'
    | '/login'
    | '/cabinets/$id'
    | '/drivers/$id'
    | '/cabinets'
    | '/drivers'
    | '/cabinets/$id/edit'
    | '/drivers/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/license'
    | '/login'
    | '/cabinets/$id'
    | '/drivers/$id'
    | '/cabinets'
    | '/drivers'
    | '/cabinets/$id/edit'
    | '/drivers/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/license'
    | '/login'
    | '/cabinets/$id'
    | '/drivers/$id'
    | '/cabinets/'
    | '/drivers/'
    | '/cabinets/$id/edit'
    | '/drivers/$id/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LicenseRoute: typeof LicenseRoute
  LoginRoute: typeof LoginRoute
  CabinetsIdRoute: typeof CabinetsIdRouteWithChildren
  DriversIdRoute: typeof DriversIdRouteWithChildren
  CabinetsIndexRoute: typeof CabinetsIndexRoute
  DriversIndexRoute: typeof DriversIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LicenseRoute: LicenseRoute,
  LoginRoute: LoginRoute,
  CabinetsIdRoute: CabinetsIdRouteWithChildren,
  DriversIdRoute: DriversIdRouteWithChildren,
  CabinetsIndexRoute: CabinetsIndexRoute,
  DriversIndexRoute: DriversIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/license",
        "/login",
        "/cabinets/$id",
        "/drivers/$id",
        "/cabinets/",
        "/drivers/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/license": {
      "filePath": "license.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/cabinets/$id": {
      "filePath": "cabinets/$id.tsx",
      "children": [
        "/cabinets/$id/edit"
      ]
    },
    "/drivers/$id": {
      "filePath": "drivers/$id.tsx",
      "children": [
        "/drivers/$id/edit"
      ]
    },
    "/cabinets/": {
      "filePath": "cabinets/index.tsx"
    },
    "/drivers/": {
      "filePath": "drivers/index.tsx"
    },
    "/cabinets/$id/edit": {
      "filePath": "cabinets/$id.edit.tsx",
      "parent": "/cabinets/$id"
    },
    "/drivers/$id/edit": {
      "filePath": "drivers/$id.edit.tsx",
      "parent": "/drivers/$id"
    }
  }
}
ROUTE_MANIFEST_END */
